generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../local.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         String    @default("[]")
  members       Member[]
}

model Member {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id         String    @id @default(cuid())
  uniqueName String
  name       String
  avatar     String?
  members    Member[]
  tier       Int       @default(0)
  credits    Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
  Invite     Invite[]

  @@unique([uniqueName])
}

model Project {
  id        String   @id @default(cuid())
  teamId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  api       String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Invite {
  id        String   @id @default(cuid())
  at        DateTime @default(now())
  teamId    String
  teamName  String
  userEmail String
  state     String
  role      String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Waitlist {
  id    String @id @default(cuid())
  email String @unique
}
